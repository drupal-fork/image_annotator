<?php
// $Id$
/**
 * @file
 *
 */
/**
 * Implements hook_field_info()
 */
function image_annotator_field_info() {
  return array(
    'image_annotator' => array(
      'label' => t('Image Annotator'),
      'default_formatter' => 'image_annotator',
      'default_widget' => 'image_annotator_hidden',
      'instance_settings' => array(
        'image_field' => '',
      ),
    )
  );
}

/**
 * Implements hook_field_is_empty()
 */
function image_annotator_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_formatter_info()
 */
function image_annotator_field_formatter_info() {
  return array(
    'image_annotator' => array(
      'label' => t('Default'),
      'field types' => array('image_annotator'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view()
 */
function image_annotator_field_formatter_view ($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // support field collections
  static $highest_delta = -1;
  //figure out if this field is part of a collection, if so, figure out which delta it has.
  $settings = $instance['settings'];
  $value = array();
  if (isset($items[0]['value'])) {
    $value = drupal_json_decode('[' . $items[0]['value'] . ']');
    $value = reset($value);
  }
  $number = empty($value) ? $highest_delta + 1 : $value['delta'];
  if ($number > $highest_delta) {
    $highest_delta = $number;
  }
  $settings = $instance['settings'];
  $element = array();
  if (!empty($items)) {
    foreach ($items as $delta => $item) {
      $text = '';

      if (isset($item['value'])) {
        $text = $item['value'];
      }
      $element[$delta]['image_annotator_coordinates'] = array(
        '#type' => 'hidden',
        '#value' => $text,
        '#attributes' => array(
          'id' => $field['field_name'] . '__' . $langcode . '__' . $delta . '__coordinates',
          'class' => array('image-annotator-pointers'),
        )
      );
      $rel = 'field-name-' . drupal_clean_css_identifier($settings['image_field']);
      $element[$delta]['image_annotator_button'] = array(
        '#type' => 'hidden',
        '#value' => '',
        '#attributes' => array(
          'class' => array('image-annotator-button'),
          'rel' => $rel,
          'id' => $field['field_name'] . '__' . $langcode . '__' . $number . '__button',
        ),
      );
    }
    $number++;
    $js_settings = array(
      'imageAnnotator' => array($field['field_name'] => array('imagefield' => $rel, 'edit' => FALSE)),
    );
    drupal_add_js($js_settings, 'setting');
    libraries_load('json2');
    drupal_add_js(drupal_get_path('module', 'image_annotator') . '/image_annotator.js');
    drupal_add_css(drupal_get_path('module', 'image_annotator') . '/image_annotator.css');
  }
  return $element;
}

/**
 * Implements hook_field_instance_settings_form()
 */
function image_annotator_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $fields = field_info_fields();
  $options = drupal_map_assoc(array_keys(array_filter($fields, 'image_annotator_is_image_field')));
  $form['image_field'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#required' => TRUE,
    '#default_value' => $settings['image_field'],
    '#description' => t('Choose the image field you want to annotate'),
    '#title' => t('Image field'),
  );
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function image_annotator_form_field_ui_field_edit_form_alter(&$form) {
  if ($form['#field']['type'] == 'image_annotator') {
    $form['field']['cardinality_markup'] = array(
      '#type' => 'item',
      '#markup' => 1,
      '#description' => t('This field stores all coordinates in one field.'),
      '#title' => $form['field']['cardinality']['#title'],
    );
    $form['field']['cardinality'] = array(
      '#type' => 'value',
      '#value' => 1,
    );
  }
}

/**
 * Implements hook_field_widget_info()
 */
function image_annotator_field_widget_info() {
  return array(
    'image_annotator_hidden' => array(
      'label' => t('Pointer'),
      'field types' => array('image_annotator'),
    ),
    'image_annotator_rectangle' => array(
      'label' => t('Rectangle'),
      'field types' => array('image_annotator'),
    ),
    'image_annotator_pointer_draggable' => array(
      'label' => t('Draggable Pointer'),
      'field types' => array('image_annotator'),
    ),
    'image_annotator_rectangle_draggable' => array(
      'label' => t('Draggable & Resizable Rectangle'),
      'field types' => array('image_annotator'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function image_annotator_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // support field collections
  $class = '';
  $draggable = FALSE;
  $resizable = FALSE;
  switch ($instance['widget']['type']) {
    case 'image_annotator_hidden':
      $class = 'image-annotator-hidden';
      break;
    case 'image_annotator_rectangle':
      $class = 'image-annotator-rectangle';
      break;
    case 'image_annotator_pointer_draggable':
      $class = 'image-annotator-pointer-draggable';
      $draggable = TRUE;
      $element['#attached']['library'][] = array(
        'system',
        'ui.draggable'
      );
      break;
    case 'image_annotator_rectangle_draggable':
      $class = 'image-annotator-rectangle-draggable';
      $draggable = TRUE;
      $resizable = TRUE;
      $element['#attached']['library'][] = array(
        'system',
        'ui.draggable',
      );
      $element['#attached']['library'][] = array(
        'system',
        'ui.resizable',
      );
      break;
  }
  static $highest_delta = -1;
  //figure out if this field is part of a collection, if so, figure out which delta it has.
  $settings = $instance['settings'];
  $value = isset($items[$delta]['value']) ? reset(drupal_json_decode('[' . $items[$delta]['value'] . ']')) : array();
  $number = empty($value) ? $highest_delta + 1 : $value['delta'];
  if ($number > $highest_delta) {
    $highest_delta = $number;
  }
  $element['value'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : '',
    '#attributes' => array(
      'id' => $field['field_name'] . '__' . $langcode . '__' . $number . '__coordinates',
      'class' => array('image-annotator-pointers'),
    )
  );
  // Field collection
  if (isset($element['#entity_type']) && $element['#entity_type'] == 'field_collection_item') {
    $parents = (empty($form['#field_parents']) ? '' : implode('-', $form['#field_parents']) . '-');
  }
  // Normal
  else {
    $parents = (empty($form['#parents']) ? '' : implode('-', $form['#parents']) . '-');
  }
  $rel = 'edit-' . drupal_clean_css_identifier($parents . $settings['image_field']);
  $element['image_annotator_button'] = array(
    '#type' => 'button',
    '#value' => t('Place on image'),
    '#attributes' => array(
      'class' => array('image-annotator-button', $class),
      'rel' => $rel,
      'id' => $field['field_name'] . '__' . $langcode . '__' . $number . '__button',
    ),
  );
  $element['#attributes']['class'][] = 'field-annotator-' . $field['id'] . '-' . $instance['id'];
  $element['#attached']['js'] = array(
    drupal_get_path('module', 'image_annotator') . '/image_annotator.js',
    array(
      'data' => array(
        'imageAnnotator' => array(
          $field['field_name'] => array(
            'imagefield' => $rel,
            'edit' => TRUE,
            'draggable' => $draggable,
            'resizable' => $resizable,
          )
        ),
      ),
      'type' => 'setting',
    ),
  );
  $element['#attached']['css'] = array(
    drupal_get_path('module', 'image_annotator') . '/image_annotator.css',
  );
  $element['#pre_render'] = array('image_annotator_load_json2');
  return $element;
}

function image_annotator_load_json2($element) {
  libraries_load('json2');
  return $element;
}

function image_annotator_is_image_field($field) {
  return ($field['type'] == 'image') || ($field['type'] == 'fixed_field');
}
